import string

def bin2txt(input):
    ascii_string = "".join([chr(int(binary, 2)) for binary in input.split(" ")])
    return ascii_string

def bin2hex(input):
    ascii_string = "".join([hex(int(binary, 2)) for binary in input.split(" ")])
    return ascii_string

def txt2bin(input):
    return ' '.join(format(ord(x), 'b') for x in input)

def hex2bin(input):
    return "{0:08b}".format(int(input, 16))

def hex2bytes(input):
    return bytes.fromhex(input)

def hex2txt(input):
    return bytearray.fromhex(input).decode()

def txt2hex(input):
    return input.encode('utf-8').hex()


def encrypt_decrypt_xor(input, key, offset):
    input_length = len(input)
    key_length = len(key)
    encoded = []

    for i in range(offset-1, input_length, offset):
        xor = ord(input[i]) ^ ord(key[i % key_length])
        encoded.append(xor)

    return bytes(encoded)

task1 = encrypt_decrypt_xor("the world is yours", "illmatic", 1)
print(task1.hex())

#confirmation
task1_confirmation = encrypt_decrypt_xor(hex2txt("1d04094d161b1b0f0d4c051e410d06161b1f"), "illmatic", 1)
print(task1_confirmation)

task2 = encrypt_decrypt_xor(hex2txt("404b48484504404b48484504464d4848045d4b"), "$", 1)
print(task2)

hexdata_1 = "0f383e392c6d1f253420283e6d383d6d24236d3925286d3d212c2e28616d393f38286d2423292828294714283e6d046d2e2c392e256d3a3f282e266d2c23296d39252c396a3e6d3a223f296d22236d20346d3e28282947046a206d2a382c3f2c23392828296d39226d2a243b286d3422386d3a252c396d3422386d23282829470223286d2f212222296d283b283f342f2229346d212426286d07382324223f6d1f282429471a2c26286d383d6d283b283f346d20223f2324232a6d34226d046d20383e396d3e382e2e28282947032c392422233a2429286d3f382e26383e6d202c26286d3925286d3a223f21296d3e392c203d2829284714226d1a24212124286d2028266d3a286d3f2221216d3e2220286d47002c296d2e252c3f2a28296d23223a6d046d20383e396d3d3f222e2828294714226d3a286d6a2f2238396d39226d202c26286d20223b283e616d3e28396d3e3d282829471d282c2e286d39226d0f2c2f346d1d25242b28616d1c6019243d616d0c21246d1e252c25282829471a2c392e256d20286d2623222e266d3422386d2238396d212426286d0c3d222121226d0e3f282829470f2229346d2f21223a3e6d2f383e3924232a6d3422383f6d202c2624232a6d3422386d2f212828294707383e396d2b2828296d222b2b6d2934232c20242e6d2b21223a3e6d2c23296d392c26286d2528282947032828296d20223f286d24232b223f202c392422236d252220282f22346d392528236d27383e396d3f282c29470c346c6d1422386d2e2c236d3f282c296d2c21216d2c2f2238396d3925286d3d383f286d2f3f2828294709226d3925286d2f222a21286d292c232e28616d202c23616d29226d3925286d3d283d3d283f3e282829474705223a6d292c3f286d3422386d283b283f6d393f346d39226d3e39283d6d22236d20346d3e382829286d3e2522283e4719223d6d0a38236d3e2538396d29223a236d3422383f6d2b243f206d212426286d1922206d0e3f38243e28471d21282c3e286d2128396d20286d2a28396d29223a236d2c23296d2f21223a6d2c6d2b383e28470c2e3924232a6d2b2222213e6d2f3f282c2624232a6d29223a236d39226d202221282e3821283e4714226d2128396d20286d2524396d3422386d3a2439256d20346d2421216d3e393f2828396d2f2138283e470f383e392c6d1f253420283e6d2c213a2c343e6d25282c29212423283e6d3925286d3e393f2828396d23283a3e471a222260052c256c6d0528346d2f2c2f346d2a243f216d2922236a396d2f286d2e22232b383e2829471e2c24216d20346d3e283b28236d3e282c3e6d2c23296d28232722346d20346d2f222c396d2e3f38243e2847046d2623223a6d3422386d3f282c2121346d3a2c23396d39226d2623223a6d3a25226a3e470e222024232a6d39253f22382a256d21282c3b24232a6d2f213823396d3e392c24233e6d2c23296d3f283e242938283e471e223f3f346d252220282f22346d2f38396d3422383f6d2b21223a6d3e223823296d383e2829470a22396d39226d3d2c346d3422383f6d2938283e6d2f2c2f346d3422386d2623223a6d3925286d3f3821283e471a252823283b283f6d046d393f2c3b28216d3925286d3a223f21296d046d212c23292e3f38243e2847042b6d3422386d2e2522223e286d39226d2c3f223823296d3422386d2a28396d2f3f38243e28294703223a6d046d2a22396d3422386d2a2c3e3e28296d22236d3e383d283f6d382321282c2928296d2b3828213e470a243b286d20286d3f222220616d2a243b286d20286d3e2220286d3e3d2c2e286d34226d28352e383e2847471422386d23223a6d3f222e2624232a6d3a2439256d3925286d2f283e39470f383e392c6d1f253420283e6d2e222024232a6d39253f22382a256d2b3f22206d3925286d0b21243d6d002229286d1e3c382c29470f22346d1e2e2238396a3e6d3a25226d046d2f28471e393f2c242a25396d39226d3422383f6d29222028616d3a286d2e222024232a6d3e393f2c242a25396d39226d3422383f6d29222028470f3f24232a24232a6d2c21216d23283a6d3f382e26383e6d39226d2c21216d3422386d3f2c3d470f22346d1e2e2238396a3e6d3a25226d046d2f28616d0b21243d6d002229286d243e6d3925286d3e3c38602429602c29470f383e392c6d1f253420283e6d2f3f282c266d24396d29223a236d212426286d3925243e474714226d3a25242e256d3e392221286d20346d2b21223a470828232428616d2028282324286d20242328346d20224719253f223a6d392528206d39343d286d222b6d3f242a25396d2238396d20346d3a242329223a470f212c3e396d3422383f6d2524396d3422386d3a2439256d2c6d29243f282e396d2f21223a470f226c6d0e222024232a6d39253f22382a256d212426286d0a6304636d072228471e392c3f6d1a2c3f3e6d20223b24232a6d2421216d212426286d052c236d1e22212247002c26286d3422386d2f2238232e286d2c3f223823296d212426286d3925243e6d3a2c3e6d2e2c21343d3e22470c213a2c343e6d3e252423286d2e2c383e286d046d2a22396d3925286d0524601d3f226d0a21223a471422386d39252423266d39252c396d3422386d2e2c236d252429286d3422386d39252423266d3422386d2e2c236d212c346d21223a471f2221216d383d6d22236d3422383f6d212426286d052c3a2c24246d78607d47002c2e2628296d2238396d3a2439256d20346d293f282c293e6d2c23296d20346d062c232a2221470b223f2a28396d3925286d002228396d27383e396d3d2c3e3e6d3925286d0e243e2e224714226c6d192c26286d2c6d393f243d6d29223a236d39226d002835242e22470e2220286d2f2c2e266d3a2439256d39252c396d39252c396d20242a25396d202c26286d3422386d3d3e342e252247002c35242038206d2b3f283c3828232e24283e6d39253f22382a256d3422383f6d3e39283f2822471e223f3f346d3925243e6d243e6d24396d2f38396d252220282f22346d046d2a22396d39226d2a2247"

for letter in (string.ascii_uppercase + string.ascii_lowercase):
    print(letter)
    task3 = encrypt_decrypt_xor(hex2txt(hexdata_1), letter, 1)
    print(task3)
    #letter M
    #Busta Rhymes up in the place, true indeed

# import nltk

# nltk.download("words")

english_letter_freq = {'a': 8.167, 'b': 1.492, 'c': 2.782, 'd': 4.253, 'e': 12.702, 'f': 2.228,
                       'g': 2.015, 'h': 6.094, 'i': 6.966, 'j': 0.153, 'k': 0.772, 'l': 4.025,
                       'm': 2.406, 'n': 6.749, 'o': 7.507, 'p': 1.929, 'q': 0.095, 'r': 5.987,
                       's': 6.327, 't': 9.056, 'u': 2.758, 'v': 0.978, 'w': 2.360, 'x': 0.150,
                       'y': 1.974, 'z': 0.074}


def get_frequency(message):
    rel_freq = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0,
                'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,
                'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,
                's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0,
                'y': 0, 'z': 0}

    letters = 'abcdefghijklmnopqrstuvwxyz'
    len_of_text = 1
    for letter in message:
        if letter.lower() in letters:
            rel_freq[letter.lower()] += 1
            len_of_text += 1

    rel_freq = {k: v / len_of_text for k, v in rel_freq.items()}
    score = 0.0
    for letter in letters:
        score += abs(english_letter_freq[letter] - rel_freq[letter])

    return score


def automatic_single_letter_xor(input_var):
    most_correct_text = ""
    most_correct = -1
    for letter in (string.ascii_uppercase + string.ascii_lowercase):
        task3 = encrypt_decrypt_xor(input_var, letter, 1)
        task3_splitted = task3.decode().split()
        correct = 0
        for word in task3_splitted:
            if (str(word) in words.words()):
                correct += 1
        if (correct > most_correct):
            most_correct = correct
            most_correct_text = task3
            # print(task3)
        # print(correct)
        if (most_correct > 250):
            break
    print(most_correct_text)


def automate_xor(input_var, offset):
    best_score = 99999
    best_message = ""
    for letter in (string.ascii_letters):
        task3 = encrypt_decrypt_xor(input_var, letter, offset)
        task3_text = task3.decode()
        if ('*' in task3_text):
            continue
        score = get_frequency(task3_text)

        if (score < best_score):
            best_score = score
            best_message = task3_text

    return best_message


answer = automate_xor(hex2txt(hexdata_1), 1)
print(answer)